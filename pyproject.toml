[project]
name = "telegram-torrent-downloader"
dynamic = ["version"]
description = "Add your description here"
readme = "README.md"
authors = [
    { name = "Jag_k", email = "30597878+jag-k@users.noreply.github.com" }
]
requires-python = ">=3.13"
dependencies = [
    "pydantic>=2.9.2",
    "pydantic-settings>=2.6.1",
    "telethon>=1.37.0",
]
license = {file = "LICENCE"}
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Topic :: Utilities",
    "Environment :: Console",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.13",
]
repository = "https://github.com/jag-k/telegram-torrent-downloader"
homepage = "https://github.com/jag-k/telegram-torrent-downloader#readme"

[project.urls]
"Homepage" = "https://github.com/jag-k/telegram-torrent-downloader"
"Bug Tracker" = "https://github.com/jag-k/telegram-torrent-downloader/issues"
"Documentation" = "https://github.com/jag-k/telegram-torrent-downloader#readme"

[project.optional-dependencies]
cryptg = [
    "cryptg>=0.5.0.post0",
]

[project.scripts]
telegram-torrent-downloader = "main:main"

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "app/version.py"

[tool.uv]
dev-dependencies = [
    "mypy>=1.13.0",
    "pre-commit>=4.0.1",
    "pydantic-settings-export>=0.3.0",
    "ruff>=0.7.4",
    "ssort>=0.14.0",
]

[tool.mypy]
python_version = "3.13"
ignore_missing_imports = true
scripts_are_modules = true
allow_redefinition = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_no_return = false
show_error_context = true
show_column_numbers = true
show_error_codes = true
color_output = false
pretty = true
exclude = [
    '^setup\.py$',
    '^tmp\.py$',
    '^venv/',
    '^.venv/',
    '^conftest\.py$',
    '^tests/',
    '\.local\.',
    '\.local$',
    '^local\.',
    '\.private\.',
    '^app/version\.py$',
]
disable_error_code = [
    "call-arg",
    "valid-type",
]
enable_incomplete_feature = ["PreciseTupleTypes"]


[[tool.mypy.overrides]]
module = [
    "app.models.*"
]
disable_error_code = [
    "arg-type"
]

# https://docs.astral.sh/ruff/
[tool.ruff]
target-version = "py313"
line-length = 120
extend-exclude = [
    ".idea",
    ".vscode",
    ".fleet",
    "app/version.py",
]
src = ["app"]

# https://docs.astral.sh/ruff/settings/#lint
[tool.ruff.lint]
select = [
    'F', # flake8
    # 'C90', # mccabe
    'I', # isort
    'ASYNC', # flake8-async
    'B', # flake8-bugbear
    'Q', # flake8-quotes
    'TCH', # flake8-type-checking
    'PTH', # flake8-use-pathlib
    # 'D', # pydocstyle
    'W', # pycodestyle (warnings)
    'E', # pycodestyle (errors)
    'N', # pep8-naming
    'PT', # flake8-pytest-style
    'PL', # pylint
    'RUF', # ruff-specific rules
]
ignore = [
    'B012', # {name} inside finally blocks cause exceptions to be silenced
    'D100', # Missing docstring in public module
    'D104', # Missing docstring in public package
    'D105', # Missing docstring in magic method
    'D106', # Missing docstring in public nested class
    'D107', # Missing docstring in __init__
    'D203', # 1 blank line required before class docstring
    'D401', # First line of docstring should be in imperative mood: "{first_line}"
    'D404', # First word of the docstring should not be "This"
    'D207', # Docstring is under-indented
    'D208', # Docstring is over-indented
    'I001', # Import block is un-sorted or un-formatted
    'RUF100', # Unused noqa directive
    'N805', # First argument of a method should be named 'self'
]

[tool.ruff.lint.pylint]
max-args = 12

# https://docs.astral.sh/ruff/settings/#extend-per-file-ignores
[tool.ruff.lint.extend-per-file-ignores]
'__init__.py' = [
    'F401', # {name} imported but unused; consider using importlib.util.find_spec to test for availability
    'F403', # from {name} import * used; unable to detect undefined names
    'F405', # {name} may be undefined, or defined from star imports
]

# https://docs.astral.sh/ruff/settings/#lintpydocstyle
[tool.ruff.lint.pydocstyle]
convention = 'pep257'


# https://docs.astral.sh/ruff/settings/#lintmccabe
[tool.ruff.lint.mccabe]
max-complexity = 6

# https://docs.astral.sh/ruff/settings/#lintisort
[tool.ruff.lint.isort]
section-order = [
    'future',
    'standard-library',
    'third-party',
    'first-party',
    'local-folder',
]
known-first-party = ["app"]
lines-after-imports = 2
lines-between-types = 1

[tool.pydantic_settings_export]
project_dir = "."
default_settings = [
    "app.config.settings:Settings",
]

[tool.pydantic_settings_export.dotenv]
name = ".env.example"

[tool.pydantic_settings_export.markdown]
name = "Configuration.md"
save_dirs = ["."]
